git init
git add .
git commit -m "primeiro commit"
git branch -M main
git remote add origin https://github.com/seu-usuario/nome-do-repo.git
git push -u origin main
const firebaseConfig = {
  apiKey: process.env.REACT_APP_API_KEY,
  authDomain: process.env.REACT_APP_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_PROJECT_ID,
  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_APP_ID
};
// Site de leitura com Firebase config usando variáveis de ambiente para deploy em Vercel

import React, { useState, useEffect } from "react"; import { BrowserRouter as Router, Routes, Route, Link, useParams } from "react-router-dom"; import { initializeApp } from "firebase/app"; import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut } from "firebase/auth"; import { getFirestore, doc, getDoc, collection, getDocs, addDoc } from "firebase/firestore";

const firebaseConfig = { apiKey: process.env.REACT_APP_API_KEY, authDomain: process.env.REACT_APP_AUTH_DOMAIN, projectId: process.env.REACT_APP_PROJECT_ID, storageBucket: process.env.REACT_APP_STORAGE_BUCKET, messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID, appId: process.env.REACT_APP_APP_ID };

const app = initializeApp(firebaseConfig); const auth = getAuth(app); const db = getFirestore(app);

function App() { const [user, setUser] = useState(null);

useEffect(() => { onAuthStateChanged(auth, setUser); }, []);

return ( <Router> <div className="min-h-screen bg-white text-gray-800"> <Navbar user={user} /> <Routes> <Route path="/" element={<Home />} /> <Route path="/catalogo" element={<Catalogo />} /> <Route path="/livro/:id" element={<Livro user={user} />} /> <Route path="/leitor/:id" element={<Leitor />} /> <Route path="/login" element={<Login />} /> <Route path="/admin" element={<Admin />} /> </Routes> </div> </Router> ); }

function Navbar({ user }) { return ( <nav className="bg-indigo-600 text-white p-4 shadow"> <div className="container mx-auto flex justify-between items-center"> <Link to="/" className="text-xl font-bold">Leituras</Link> <div className="space-x-4"> <Link to="/catalogo">Catálogo</Link> {user && <Link to="/admin">Painel</Link>} {user ? <span>Olá, {user.email}</span> : <Link to="/login">Login</Link>} </div> </div> </nav> ); }

function Home() { return ( <section className="p-6 text-center"> <h1 className="text-3xl font-semibold mb-4">Bem-vindo ao site de leitura</h1> <p className="text-gray-600">Explore obras incríveis disponíveis para leitura gratuita.</p> </section> ); }

function Catalogo() { const [livros, setLivros] = useState([]);

useEffect(() => { const fetchLivros = async () => { const querySnapshot = await getDocs(collection(db, "livros")); const dados = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); setLivros(dados); }; fetchLivros(); }, []);

return ( <section className="p-6"> <h2 className="text-2xl font-semibold mb-4">Catálogo</h2> <input
type="text"
placeholder="Buscar por título ou autor..."
className="border p-2 w-full max-w-md mb-4"
/> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> {livros.map((livro) => ( <Link key={livro.id} to={/livro/${livro.id}} className="p-4 border rounded shadow hover:shadow-md" > <h3 className="font-bold">{livro.titulo}</h3> <p className="text-sm text-gray-500">{livro.autor}</p> </Link> ))} </div> </section> ); }

function Livro({ user }) { const { id } = useParams(); const [livro, setLivro] = useState(null);

useEffect(() => { const fetchLivro = async () => { const docRef = doc(db, "livros", id); const docSnap = await getDoc(docRef); if (docSnap.exists()) setLivro(docSnap.data()); }; fetchLivro(); }, [id]);

if (!livro) return <p className="p-6">Carregando...</p>;

return ( <section className="p-6 max-w-3xl mx-auto"> <h2 className="text-2xl font-semibold">{livro.titulo}</h2> <p className="text-gray-600 mb-2">por {livro.autor}</p> <p className="mb-4">Sinopse: {livro.sinopse}</p> <Link to={/leitor/${id}} className="text-indigo-600 underline">Ler agora</Link> </section> ); }

function Leitor() { const { id } = useParams(); return ( <section className="p-6 max-w-3xl mx-auto"> <h2 className="text-xl font-semibold mb-4">Capítulo 1</h2> <article className="space-y-4 text-justify"> <p>Texto do capítulo do livro {id}...</p> </article> </section> ); }

function Login() { const [email, setEmail] = useState(""); const [senha, setSenha] = useState(""); const [erro, setErro] = useState("");

const handleLogin = async (e) => { e.preventDefault(); try { await signInWithEmailAndPassword(auth, email, senha); } catch (err) { setErro("Email ou senha inválidos."); } };

return ( <section className="p-6 max-w-md mx-auto"> <h2 className="text-2xl font-semibold mb-4">Entrar</h2> <form className="space-y-4" onSubmit={handleLogin}> <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} className="border p-2 w-full" /> <input type="password" placeholder="Senha" value={senha} onChange={(e) => setSenha(e.target.value)} className="border p-2 w-full" /> <button className="bg-indigo-600 text-white px-4 py-2 rounded">Entrar</button> {erro && <p className="text-red-500 text-sm">{erro}</p>} </form> </section> ); }

function Admin() { const [titulo, setTitulo] = useState(""); const [autor, setAutor] = useState(""); const [sinopse, setSinopse] = useState(""); const [mensagem, setMensagem] = useState("");

const adicionarLivro = async () => { try { await addDoc(collection(db, "livros"), { titulo, autor, sinopse }); setMensagem("Livro adicionado com sucesso!"); setTitulo(""); setAutor(""); setSinopse(""); } catch (e) { setMensagem("Erro ao adicionar livro."); } };

return ( <section className="p-6 max-w-xl mx-auto"> <h2 className="text-2xl font-semibold mb-4">Adicionar Livro</h2> <input type="text" placeholder="Título" value={titulo} onChange={(e) => setTitulo(e.target.value)} className="border p-2 w-full mb-2" /> <input type="text" placeholder="Autor" value={autor} onChange={(e) => setAutor(e.target.value)} className="border p-2 w-full mb-2" /> <textarea placeholder="Sinopse" value={sinopse} onChange={(e) => setSinopse(e.target.value)} className="border p-2 w-full mb-2" /> <button onClick={adicionarLivro} className="bg-indigo-600 text-white px-4 py-2 rounded"> Adicionar </button> {mensagem && <p className="mt-2 text-green-600">{mensagem}</p>} </section> ); }

export default App;


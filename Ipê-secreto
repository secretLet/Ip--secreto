// Site de leitura com painel administrativo, capítulos, favoritos e comentários

import React, { useState, useEffect } from "react"; import { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from "react-router-dom"; import { initializeApp } from "firebase/app"; import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut } from "firebase/auth"; import { getFirestore, doc, getDoc, collection, getDocs, addDoc, setDoc, updateDoc, arrayUnion } from "firebase/firestore";

const firebaseConfig = { apiKey: "SUA_API_KEY", authDomain: "SEU_AUTH_DOMAIN", projectId: "SEU_PROJECT_ID", storageBucket: "SEU_BUCKET", messagingSenderId: "SEU_SENDER_ID", appId: "SEU_APP_ID" };

const app = initializeApp(firebaseConfig); const auth = getAuth(app); const db = getFirestore(app);

function App() { const [user, setUser] = useState(null);

useEffect(() => { onAuthStateChanged(auth, setUser); }, []);

return ( <Router> <div className="min-h-screen bg-white text-gray-800"> <Navbar user={user} /> <Routes> <Route path="/" element={<Home />} /> <Route path="/catalogo" element={<Catalogo />} /> <Route path="/livro/:id" element={<Livro user={user} />} /> <Route path="/leitor/:id/:capitulo" element={<Leitor />} /> <Route path="/login" element={<Login />} /> <Route path="/admin" element={<Admin user={user} />} /> </Routes> </div> </Router> ); }

function Navbar({ user }) { const navigate = useNavigate();

const handleLogout = async () => { await signOut(auth); navigate("/login"); };

return ( <nav className="bg-indigo-600 text-white p-4 shadow"> <div className="container mx-auto flex justify-between items-center"> <Link to="/" className="text-xl font-bold">Leituras</Link> <div className="space-x-4"> <Link to="/catalogo">Catálogo</Link> {user ? ( <> <Link to="/admin">Painel</Link> <button onClick={handleLogout}>Sair</button> </> ) : ( <Link to="/login">Login</Link> )} </div> </div> </nav> ); }

function Home() { return ( <section className="p-6 text-center"> <h1 className="text-3xl font-semibold mb-4">Bem-vindo ao site de leitura</h1> <p className="text-gray-600">Explore obras incríveis disponíveis para leitura gratuita.</p> </section> ); }

function Catalogo() { const [livros, setLivros] = useState([]);

useEffect(() => { const fetchLivros = async () => { const querySnapshot = await getDocs(collection(db, "livros")); const dados = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); setLivros(dados); }; fetchLivros(); }, []);

return ( <section className="p-6"> <h2 className="text-2xl font-semibold mb-4">Catálogo</h2> <input
type="text"
placeholder="Buscar por título ou autor..."
className="border p-2 w-full max-w-md mb-4"
/> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> {livros.map((livro) => ( <Link key={livro.id} to={/livro/${livro.id}} className="p-4 border rounded shadow hover:shadow-md" > <h3 className="font-bold">{livro.titulo}</h3> <p className="text-sm text-gray-500">{livro.autor}</p> </Link> ))} </div> </section> ); }

function Livro({ user }) { const { id } = useParams(); const [livro, setLivro] = useState(null); const [capitulos, setCapitulos] = useState([]);

useEffect(() => { const fetchLivro = async () => { const docRef = doc(db, "livros", id); const docSnap = await getDoc(docRef); if (docSnap.exists()) setLivro(docSnap.data()); };

const fetchCapitulos = async () => {
  const querySnapshot = await getDocs(collection(db, `livros/${id}/capitulos`));
  const dados = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  setCapitulos(dados);
};

fetchLivro();
fetchCapitulos();

}, [id]);

if (!livro) return <p className="p-6">Carregando...</p>;

return ( <section className="p-6 max-w-3xl mx-auto"> <h2 className="text-2xl font-semibold">{livro.titulo}</h2> <p className="text-gray-600 mb-2">por {livro.autor}</p> <p className="mb-4">Sinopse: {livro.sinopse}</p> <ul className="space-y-2"> {capitulos.map((c) => ( <li key={c.id}> <Link to={/leitor/${id}/${c.id}} className="text-indigo-600 underline"> {c.titulo} </Link> </li> ))} </ul> </section> ); }

function Leitor() { const { id, capitulo } = useParams(); const [conteudo, setConteudo] = useState("");

useEffect(() => { const fetchCap = async () => { const capRef = doc(db, livros/${id}/capitulos, capitulo); const capSnap = await getDoc(capRef); if (capSnap.exists()) setConteudo(capSnap.data().texto); }; fetchCap(); }, [id, capitulo]);

return ( <section className="p-6 max-w-3xl mx-auto"> <h2 className="text-xl font-semibold mb-4">Leitura</h2> <article className="space-y-4 text-justify whitespace-pre-wrap"> {conteudo || "Carregando..."} </article> </section> ); }

function Login() { const [email, setEmail] = useState(""); const [senha, setSenha] = useState(""); const [erro, setErro] = useState(""); const navigate = useNavigate();

const handleLogin = async (e) => { e.preventDefault(); try { await signInWithEmailAndPassword(auth, email, senha); navigate("/"); } catch (err) { setErro("Email ou senha inválidos."); } };

return ( <section className="p-6 max-w-md mx-auto"> <h2 className="text-2xl font-semibold mb-4">Entrar</h2> <form className="space-y-4" onSubmit={handleLogin}> <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} className="border p-2 w-full" /> <input type="password" placeholder="Senha" value={senha} onChange={(e) => setSenha(e.target.value)} className="border p-2 w-full" /> <button className="bg-indigo-600 text-white px-4 py-2 rounded">Entrar</button> {erro && <p className="text-red-500 text-sm">{erro}</p>} </form> </section> ); }

function Admin({ user }) { const [titulo, setTitulo] = useState(""); const [autor, setAutor] = useState(""); const [sinopse, setSinopse] = useState(""); const [capTitulo, setCapTitulo] = useState(""); const [capTexto, setCapTexto] = useState(""); const [livroId, setLivroId] = useState(""); const [mensagem, setMensagem] = useState("");

const handleAddLivro = async (e) => { e.preventDefault(); const docRef = await addDoc(collection(db, "livros"), { titulo, autor, sinopse }); setLivroId(docRef.id); setMensagem("Livro adicionado com sucesso! Agora adicione um capítulo."); setTitulo(""); setAutor(""); setSinopse(""); };

const handleAddCapitulo = async (e) => { e.preventDefault(); if (!livroId) return; await addDoc(collection(db, livros/${livroId}/capitulos), { titulo: capTitulo, texto: capTexto }); setMensagem("Capítulo adicionado com sucesso!"); setCapTitulo(""); setCapTexto(""); };

if (!user) return <p className="p-6">Acesso restrito.</p>;

return ( <section className="p-6 max-w-xl mx-auto"> <h2 className="text-2xl font-semibold mb-4">Painel Administrativo</h2> <form className="space-y-4" onSubmit={handleAddLivro}> <input type="text" placeholder="Título do Livro" value={titulo} onChange={(e) => setTitulo(e.target.value)} className="border p-2 w-full" /> <input type="text" placeholder="Autor" value={autor} onChange={(e) => setAutor(e.target.value)} className="border p-2 w-full" /> <textarea placeholder="Sinopse" value={sinopse} onChange={(e) => setSinopse(e.target.value)} className="border p-2 w-full" /> <button className="bg-indigo-600 text-white px-4 py-2 rounded">Adicionar Livro</button> </form>

{livroId && (
    <form className="space-y-4 mt-8" onSubmit={handleAddCapitulo}>
      <h3 className="text-lg font-semibold">Adicionar Capítulo</h3>
      <input
        type="text"
        placeholder="Título do Capítulo"
        value={capTitulo}
        onChange={(e) => setCapTitulo(e.target.value)}
        className="border p-2 w-full"
      />
      <textarea
        placeholder="Texto do Capítulo"
        value={capTexto}
        onChange={(e) => setCapTexto(e.target.value)}
        className="border p-2 w-full h-40"
      />
      <button className="bg-green-600 text-white px-4 py-2 rounded">Salvar Capítulo</button>
    </form>
  )}
  {mensagem && <p className="text-green-600 mt-4">{mensagem}</p>}
</section>

); }

export default App;

